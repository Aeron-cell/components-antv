import { Canvas } from '@antv/f2';
import { createCanvas, CanvasProps } from '@antv/f-react';
export { createCanvas, CanvasProps };
declare const _default: {
    new (props: CanvasProps): {
        canvasRef: import("react").RefObject<HTMLCanvasElement>;
        canvas: Canvas<import("@antv/f2").CanvasProps>;
        parentNode: {
            width: number;
            height: number;
        };
        observer: ResizeObserver;
        catchError(error: any): void;
        getProps: () => import("@antv/f2").CanvasProps;
        componentDidMount(): void;
        observeElement(): void;
        resize(): void;
        componentDidUpdate(): void;
        render(): JSX.Element;
        componentWillUnmount(): void;
        destroy(): void;
        context: any;
        setState<K extends "error">(state: import("@antv/f-react/es/createCanvas").CanvasState | ((prevState: Readonly<import("@antv/f-react/es/createCanvas").CanvasState>, props: Readonly<CanvasProps>) => import("@antv/f-react/es/createCanvas").CanvasState | Pick<import("@antv/f-react/es/createCanvas").CanvasState, K>) | Pick<import("@antv/f-react/es/createCanvas").CanvasState, K>, callback?: () => void): void;
        forceUpdate(callback?: () => void): void;
        readonly props: Readonly<CanvasProps> & Readonly<{
            children?: import("react").ReactNode;
        }>;
        state: Readonly<import("@antv/f-react/es/createCanvas").CanvasState>;
        refs: {
            [key: string]: import("react").ReactInstance;
        };
        shouldComponentUpdate?(nextProps: Readonly<CanvasProps>, nextState: Readonly<import("@antv/f-react/es/createCanvas").CanvasState>, nextContext: any): boolean;
        componentDidCatch?(error: Error, errorInfo: import("react").ErrorInfo): void;
        getSnapshotBeforeUpdate?(prevProps: Readonly<CanvasProps>, prevState: Readonly<import("@antv/f-react/es/createCanvas").CanvasState>): any;
        componentWillMount?(): void;
        UNSAFE_componentWillMount?(): void;
        componentWillReceiveProps?(nextProps: Readonly<CanvasProps>, nextContext: any): void;
        UNSAFE_componentWillReceiveProps?(nextProps: Readonly<CanvasProps>, nextContext: any): void;
        componentWillUpdate?(nextProps: Readonly<CanvasProps>, nextState: Readonly<import("@antv/f-react/es/createCanvas").CanvasState>, nextContext: any): void;
        UNSAFE_componentWillUpdate?(nextProps: Readonly<CanvasProps>, nextState: Readonly<import("@antv/f-react/es/createCanvas").CanvasState>, nextContext: any): void;
    };
    contextType?: import("react").Context<any>;
};
export default _default;
